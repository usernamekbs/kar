package com.kick;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.imageio.ImageIO;

import org.apache.poi.util.SystemOutLogger;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.junit.jupiter.api.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.edge.EdgeOptions;
import org.openqa.selenium.support.ui.Select;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.kick.controller.CoupangController;
import com.kick.entity.CoupangAttributesRepository;
import com.kick.entity.CoupangContentsRepository;
import com.kick.entity.CoupangDetailsRepository;
import com.kick.entity.CoupangImagesRepository;
import com.kick.entity.CoupangItemsRepository;
import com.kick.entity.CoupangRepository;
import com.kick.entity.Product;
import com.kick.entity.ProductRepository;

@SpringBootTest
class Cafe24Coupang {
    
	@Autowired ProductRepository repository;
	@Autowired CoupangRepository coupangRepository;
	@Autowired CoupangItemsRepository coupangItemsRepository;
	@Autowired CoupangAttributesRepository coupangAttributesRepository;
	
	@Autowired CoupangImagesRepository coupangImagesRepository;
	@Autowired CoupangContentsRepository coupangContentsRepository;
	@Autowired CoupangDetailsRepository coupangDetailsRepository;
	
	
	public static final String filePath= "C:\\Users\\15kso\\OneDrive\\바탕 화면\\새 폴더\\옵션.xlsx";
	List<String> selectCountOption = new ArrayList<>();
	/////////////////////////CAFE24 쿠팡////////////////////////////
	@Test
	//test 코드에서 transactional 사용 하지 마라
	void asd() throws InterruptedException, IOException {
		EdgeDriver driver;
	 	EdgeOptions options = new EdgeOptions();
	 	options.addArguments("--start-maximized");
        driver = new EdgeDriver(options);
        
	    driver.get("https://trycozy.com/member/login.html");
        WebElement member_id=driver.findElement(By.id("member_id"));
        WebElement member_passwd=driver.findElement(By.id("member_passwd"));
        WebElement login=driver.findElement(By.cssSelector("form > div > div > fieldset > a > img"));
        member_id.sendKeys("qudtn0295");
        //qudtn0295 qudtn4589
        member_passwd.sendKeys("qudtn4589");
        login.click();
        Thread.sleep(5000);
        repository.deleteAll();
        coupangRepository.deleteAll();
        coupangItemsRepository.deleteAll();
        coupangAttributesRepository.deleteAll();
        //19까지 함 APPLE
        driver.navigate().to("https://trycozy.com/product/list.html?cate_no=514&page=10");
        
        //변수
        List<String> urls = new ArrayList<>();
//        WebElement totalCount=driver.findElement(By.cssSelector("#contents > div.xans-element-.xans-product.xans-product-normalpackage > div.xans-element-.xans-product.xans-product-normalmenu > div > p > strong"));
        //tcnt
        for(int i=10; i<=15;i++) {
        	WebElement nextPage=driver.findElement(By.cssSelector("#contents > div.xans-element-.xans-product.xans-product-normalpaging > p:nth-child(4) > a"));
        	
        	List<WebElement> elements = driver.findElements(By.cssSelector("#contents > div.xans-element-.xans-product.xans-product-normalpackage > div.xans-element-.xans-product.xans-product-listnormal > ul >li > div > a"));
        	
        	for(WebElement ele : elements) {
        		urls.add(ele.getAttribute("href"));
        	}
        	nextPage.click();
        }
        
        for(String url : urls) {
        	driver.navigate().to(url);
        	//셀렉트박스는 두개값 만 가져옴
        	List<WebElement> selectLists = driver.findElements(By.cssSelector("#contents > div.xans-element-.xans-product.xans-product-detail > div.detailArea > div.infoArea > table > tbody > tr > td > select"));
        	StringBuilder selectOption = new StringBuilder();
        	StringBuilder selectOption2 = new StringBuilder();
        	StringBuilder optionNo = new StringBuilder();
        	StringBuilder optionYn =new StringBuilder();
        	List<String> imgs = new ArrayList<>();
        	List<WebElement> thumbLists = driver.findElements(By.cssSelector("#contents > div.xans-element-.xans-product.xans-product-detail > div.detailArea > div.xans-element-.xans-product.xans-product-image.imgArea > div.keyImg > a > img"));
        	
        	List<WebElement> detailImageLists = driver.findElements(By.cssSelector("#prdDetail > div > p > img"));
            List<WebElement> detailImageLists2 = driver.findElements(By.cssSelector("#prdDetail > div > p > a > img"));
            List<WebElement> detailImageLists3 = driver.findElements(By.cssSelector("#prdDetail > div.cont > div > p > img"));
            List<WebElement> detailImageLists4 = driver.findElements(By.cssSelector("#prdDetail > div.cont > div > img"));
            List<WebElement> detailImageLists5 = driver.findElements(By.cssSelector("#prdDetail > div > img"));
            
            String uuid = UUID.randomUUID().toString();
            String fileName = null;
            for(WebElement thmb : thumbLists) {
        		String thbFormat = thmb.getAttribute("src").substring(thmb.getAttribute("src").length()-4,thmb.getAttribute("src").length());
        		if(thbFormat.equals(".jpg")||thbFormat.equals(".gif")||thbFormat.equals(".png")||thbFormat.equals(".jpeg")) {
        			String imgUrl = thmb.getAttribute("src");
        			fileName = thmb.getAttribute("src").substring(thmb.getAttribute("src").lastIndexOf("/") + 1);
        			fileName = URLDecoder.decode(fileName,"UTF-8").toString().substring(0, URLDecoder.decode(fileName,"UTF-8").length()-4);
        			String savePath ="C:\\Users\\15kso\\OneDrive\\바탕 화면\\새 폴더\\";
              		File afterFile = new File(savePath + URLDecoder.decode(fileName,"UTF-8")+".png");
              		saveThumbImage(imgUrl,savePath,afterFile);	
              		
        		}
            }

            StringBuilder sb =new StringBuilder();
            for(WebElement detailImage : detailImageLists) {
            	 ((JavascriptExecutor) driver).executeScript(
                        "arguments[0].scrollIntoView();", detailImage);
             	 String imgUrl = detailImage.getAttribute("src");
        		 imgs.add(imgUrl);
            }
            
		   	for(WebElement detailImage2 : detailImageLists2) {
		   		((JavascriptExecutor) driver).executeScript(
                        "arguments[0].scrollIntoView();", detailImage2);
	   			 String imgUrl2 = detailImage2.getAttribute("src");
		   	 	 imgs.add(imgUrl2);
		   	}
		   	
		   	for(WebElement detailImage3 : detailImageLists3) {
		   		((JavascriptExecutor) driver).executeScript(
                        "arguments[0].scrollIntoView();", detailImage3);
	   			 String imgUrl3 = detailImage3.getAttribute("src");
		   	 	 imgs.add(imgUrl3);
		   	}
		   	
		   	for(WebElement detailImage4 : detailImageLists4) {
		   		((JavascriptExecutor) driver).executeScript(
                        "arguments[0].scrollIntoView();", detailImage4);
	   			 String imgUrl4 = detailImage4.getAttribute("src");
		   	 	 imgs.add(imgUrl4);
		   	}
		   	
		   	
		   	for(WebElement detailImage5 : detailImageLists5) {
		   		((JavascriptExecutor) driver).executeScript(
                        "arguments[0].scrollIntoView();", detailImage5);
	   			 String imgUrl5 = detailImage5.getAttribute("src");
		   	 	 imgs.add(imgUrl5);
		   	}
		   	
		   	String detailImgs = null;
		   	for(String img : imgs) {
				 String imageUrl  = img;
				 String savePath ="C:\\Users\\15kso\\OneDrive\\바탕 화면\\detailimage\\";
				 detailImgs = img.substring(img.lastIndexOf("/") + 1);
				 String fileNames =  URLDecoder.decode(detailImgs,"UTF-8").toString().substring(0, URLDecoder.decode(detailImgs,"UTF-8").length()-4);
				 if(fileNames.length()<50) {
					 File afterFile = new File(savePath + fileNames +".jpeg");
					 sb.append("<p align=\"center\">"+"<img src='https://qudtn0295.cafe24.com/detailImage25/"+URLDecoder.decode(fileNames,"UTF-8").toString()+".jpeg"+"'/>"+"</p>");
					 saveDetailImage(imageUrl,savePath,afterFile);
				 }else {
					 String uuid2 = UUID.randomUUID().toString();
					 File afterFile = new File(savePath + uuid2 +".jpeg");
					 sb.append("<p align=\"center\">"+"<img src='https://qudtn0295.cafe24.com/detailImage25/"+uuid2.toString()+".jpeg"+"'/>"+"</p>");
					 saveDetailImage(imageUrl,savePath,afterFile);
				 }
			}
		   	
            StringBuilder selectBoxEnabled = new StringBuilder();
            for(int k=1;k<=selectLists.size();k++) {
            	selectBoxEnabled.append("F|");
            }
            WebElement title=driver.findElement(By.cssSelector("#contents > div.xans-element-.xans-product.xans-product-detail > div.detailArea > div.infoArea > h2"));
//        	WebElement realPrice=driver.findElement(By.xpath("//*[@id=\"contents\"]/div[2]/div[2]/div[2]/div[3]/table/tbody/tr[4]/td/span"));
        	WebElement price=driver.findElement(By.cssSelector("#contents > div.xans-element-.xans-product.xans-product-detail > div.detailArea > div.infoArea > div.xans-element-.xans-product.xans-product-detaildesign > table > tbody > tr:nth-child(2) > td > strong > span > strong"));
        	WebElement productCode = driver.findElement(By.cssSelector("#contents > div.xans-element-.xans-product.xans-product-detail > div.detailArea > div.infoArea > div.xans-element-.xans-product.xans-product-detaildesign > table > tbody > tr:nth-child(6) > td > span"));
        	
            Coupang coupang = new Coupang();
        	CoupangItems coupangItems = new CoupangItems();
	    	CoupangImages coupangImages= new CoupangImages();
        	List<CoupangAttributes> attributes = new ArrayList<>();
        	CoupangContents coupnagContents = new CoupangContents();
        	CoupangDetails coupangDetails = new CoupangDetails(); 
        	///쿠팡 기본가격 등//
        	////////////////////////////
        	coupang.setSellerProductName(title.getText());
	    	coupang.setVendorId("A00962060");
	    	coupang.setSaleStartedAt("2024-01-19T00:00:00");
	    	coupang.setSaleEndedAt("2099-01-19T00:00:00");
	    	coupang.setDeliveryMethod("SEQUENCIAL");
	    	coupang.setDeliveryCompanyCode("EPOST");
	    	coupang.setDeliveryChargeType("NOT_FREE");
	    	coupang.setDeliveryCharge(3000);
	    	coupang.setFreeShipOverAmount(30000);
	    	coupang.setDeliveryChargeOnReturn(3000);
	    	coupang.setRemoteAreaDeliverable("N");
	    	coupang.setUnionDeliveryType("NOT_UNION_DELIVERY");
//	    	coupang.setReturnCenterCode();
//	    	coupang.setReturnChargeName();
//	    	coupang.setCompanyContactNumber();
//	    	coupang.setCompanyContactNumber();
//	    	coupang.setReturnZipCode();
//	    	coupang.setReturnAddress();
//	    	coupang.setReturnAddressDetail();
//	    	coupang.setReturnCharge();
//	    	coupang.setOutboundShippingPlaceCode();
	    	coupang.setVendorUserId("qudtn0295");
	    	coupang.setRequested(true);
	    	coupangRepository.save(coupang).getId();
//	    	
	    	coupangImages.setImageOrder(0);
	    	coupangImages.setImageType("REPRESENTATION");
	    	coupangImages.setVendorPath("https://coverfit.store/web/product/medium/202307/4ddcfdd9cda90ebce0daf510b735da26.png");
	    	
	    	//////////////////////////////////
	    	
	    	String rePrice = price.getText();
        	rePrice = rePrice.replace(",","");
        	rePrice = rePrice.replace("원","");
        	int reInPrice= Integer.parseInt(rePrice);
        	if(reInPrice<10000) {
        		reInPrice = reInPrice+10500;
        	}else {
        		reInPrice = reInPrice+11500;
        	}
        	coupangItems.setOriginalPrice(reInPrice);
        	coupangItems.setSalePrice(reInPrice);
        	String price2 = Integer.toString(reInPrice); 
//        	String reRealPrice = realPrice.getText();
//        	reRealPrice = reRealPrice.replace(",", "");
//        	reRealPrice = reRealPrice.replace("원 이상", "");
//        	reRealPrice = reRealPrice.replace("㈜트라이코지", rePrice);
//        	reRealPrice = Integer.toString(reInPrice); 
        	String reTitle = title.getText();
        	
        	Product products = new Product();
        	products.setTitle(reTitle);
        	products.setRealPrice(price2);
        	products.setCompany("트라이코지");
        	products.setUuid(uuid);
        	products.setSelectBoxEnabled(selectBoxEnabled.toString().substring(0, selectBoxEnabled.toString().length()-1));
        	products.setDetailImg(sb.toString());
        	products.setProductCode(productCode.getText());
        	products.setThmb(fileName+".png");
        	products.setProductCode(productCode.getText());
        	/////////////////////////////////
	    	coupangItems.setCoupang(coupang);
	    	coupangItems.setItemName(title.getText());
	    	coupangItems.setMaximumBuyCount(10);
	    	coupangItems.setMaximumBuyForPerson(0);
	    	coupangItems.setMaximumBuyForPersonPeriod(1);
	    	coupangItems.setOutboundShippingTimeDay(2);
	    	coupangItems.setUnitCount(0);
	    	coupangItems.setAdultOnly("EVERYONE");
	    	coupangItems.setTaxType("TAX");
	    	coupangItems.setParallelImported("NOT_PARALLEL_IMPORTED");
	    	coupangItems.setOverseasPurchased("NOT_OVERSEAS_PURCHASED");
	    	coupangItems.setPccNeeded(false);

	    	coupnagContents.setContentsType("TEXT");
	    	coupangDetails.setContent(sb.toString());
	    	coupangDetails.setDetailType("TEXT");
	    	int i=1;
        	//셀렉트
        	for(WebElement sel : selectLists) {
        		
        		Select selectOptions = new Select(sel);
        		selectOptions.selectByIndex(2);
	        	List<WebElement> optionList = selectOptions.getOptions();
	        	optionList.remove(0);

	        	for(WebElement option : optionList) {
	        		if(sel.getAttribute("id").equals("product_option_id1")) {
	        			//optionList에서 개수를 제한하는것도 방법일듯함..
	        			if(option.isEnabled()) {
	        				CoupangAttributes coupangAttributes = new CoupangAttributes();
	        				coupangAttributes.setAttributeTypeName("옵션");
	        				coupangAttributes.setAttributeValueName(option.getText());
	        				coupangAttributes.setCoupangItems(coupangItems);
	        				coupangItems.getAttributes().add(coupangAttributes);
	        				if(i<20) {
	        					coupangItems.searchTags(option.getText());
	        					i++;
	        				}
	        				attributes.add(coupangAttributes);
	        				selectOption.append(option.getText()+"|");
		        			if(option.getText().equals("갤럭시Z플립4(F721)")||option.getText().equals("갤럭시Z플립3/4(F711/F721)")) {
	    	        			optionNo.append("161|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시Z폴드5(F946)")) {
	    	        			optionNo.append("226|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시Z플립5(F731)")) {
	    	        			optionNo.append("225|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시Z플립3(F711)")||option.getText().equals("갤럭시Z플립3/4(F711/F721)")) {
	    	        			optionNo.append("162|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시Z플립(F700)")) {
	    	        			optionNo.append("163|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시노트20(N981)")) {
	    	        			optionNo.append("122|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시노트20울트라(N986)")) {
	    	        			optionNo.append("123|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시노트10(N971)")) {
	    	        			optionNo.append("124|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시노트10플러스(N976)")) {
	    	        			optionNo.append("125|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시노트9(N960)")) {
	    	        			optionNo.append("126|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시S23(S911)")) {
	    	        			optionNo.append("129|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시S23플러스(S916)")) {
	    	        			optionNo.append("130|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시S23울트라(S918)")) {
	    	        			optionNo.append("131|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시S22(S901)")) {
	    	        			optionNo.append("132|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시S22플러스(S906)")) {
	    	        			optionNo.append("133|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시S22울트라(S908)")) {
	    	        			optionNo.append("134|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시S21(G991)")) {
	    	        			optionNo.append("135|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시S21플러스(G996)")) {
	    	        			optionNo.append("136|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시S21울트라(G998)")) {
	    	        			optionNo.append("137|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시S20(G981)")) {
	    	        			optionNo.append("138|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시S20플러스(G986)")) {
	    	        			optionNo.append("139|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시S20울트라(G988)")) {
	    	        			optionNo.append("140|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시S10E(G970)")) {
	    	        			optionNo.append("144|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시S10(G973)")) {
	    	        			optionNo.append("142|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시S10플러스(G975)")) {
	    	        			optionNo.append("143|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시S10 5G(G977)")) {
	    	        			optionNo.append("145|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("아이폰15")) {
	    	        			optionNo.append("227|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("아이폰15플러스")) {
	    	        			optionNo.append("228|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("아이폰15프로")) {
	    	        			optionNo.append("229|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("아이폰15프로맥스")) {
	    	        			optionNo.append("230|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("아이폰14")) {
	    	        			optionNo.append("102|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("아이폰14플러스")) {
	    	        			optionNo.append("101|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("아이폰14프로")) {
	    	        			optionNo.append("100|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("아이폰14프로맥스")) {
	    	        			optionNo.append("99|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("아이폰13미니")) {
	    	        			optionNo.append("107|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("아이폰13")) {
	    	        			optionNo.append("106|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("아이폰13프로")) {
	    	        			optionNo.append("105|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("아이폰13프로맥스")) {
	    	        			optionNo.append("103|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("아이폰12미니")) {
	    	        			optionNo.append("110|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("아이폰12/12프로")) {
	    	        			optionNo.append("109|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("아이폰12프로맥스")) {
	    	        			optionNo.append("108|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("아이폰11(6.1)")) {
	    	        			optionNo.append("113|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("아이폰11 Pro(5.8)")) {
	    	        			optionNo.append("112|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("아이폰11 Pro Max(6.5)")) {
	    	        			optionNo.append("111|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시S24(S921)")) {
	    	        			optionNo.append("148|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시S24플러스(S926)")) {
	    	        			optionNo.append("149|");
	    	        			optionYn.append("Y|");
	    	        		}else if(option.getText().equals("갤럭시S24울트라(S928)")) {
	    	        			optionNo.append("232|");
	    	        			optionYn.append("Y|");
	    	        		}
	        			}
	        		}else {
	        			if(option.isEnabled()) {
		        			selectOption2.append(option.getText()+"|");
	        			}
	        		}
	        	}
        	}
        	if(selectOption.toString().length()>0 &&selectOption2.toString().length()>0 ) {
        		products.setOption("옵션1{"+selectOption.toString().substring(0, selectOption.toString().length()-1)+"}"+"//옵션2{"+selectOption2.substring(0, selectOption2.length()-1)+"}");
        	}else {
        		products.setOption("옵션1{"+selectOption.toString().substring(0, selectOption.toString().length()-1)+"}");
        	}
        	if(optionNo.toString().length()>0 && optionYn.toString().length()>0) {
	        	products.setOptionNo(optionNo.toString().substring(0, optionNo.toString().length()-1));
	        	products.setOptionEnabled(optionYn.toString().substring(0, optionYn.toString().length()-1));
        	}
        	coupangItemsRepository.save(coupangItems);
        	coupangAttributesRepository.saveAll(attributes);
        	//상세페이지에있는 제목 가격 온라인판매가 제조사
        	coupangImagesRepository.save(coupangImages);
        	coupangContentsRepository.save(coupnagContents);
        	coupangDetailsRepository.save(coupangDetails);
        	repository.save(products);
        	//쿠팡옵션정보
        	
        	
        }
        
	}
	
	//이미지 읽을대 뒤에 확장자명 곡 붙여줘야함..
	@Test
	public void excel() throws InterruptedException, IOException {
		int i=0;
		 //워크북 생성
	    XSSFWorkbook workbook = new XSSFWorkbook();
	    //워크시트 생성
	    XSSFSheet sheet = workbook.createSheet();
	    //행 생성
	    XSSFRow row = sheet.createRow(0);
	    //셀 생성
	    XSSFCell cell;
	    cell = row.createCell(0);
	    cell.setCellValue("제목");
	    cell = row.createCell(1);
	    cell.setCellValue("제조사");
	    cell = row.createCell(2);
	    cell.setCellValue("도매가");
	    cell = row.createCell(3);
	    cell.setCellValue("온라인 판매가");
	    cell = row.createCell(4);
	    cell.setCellValue("상품분류 번호");
	    cell = row.createCell(5);
	    cell.setCellValue("상품신상품 영역");
	    cell = row.createCell(6);
	    cell.setCellValue("옵션");
	    cell = row.createCell(7);
	    cell.setCellValue("옵션사용여부");
	    cell = row.createCell(8);
	    cell.setCellValue("상세페이지 이미지");
	    cell = row.createCell(9);
	    cell.setCellValue("THMB");
	    List<Product> products = repository.findAll();
//	    long count = repository.count();
	    for(Product p : products) {
	    	row = sheet.createRow(i+1);
	    	cell = row.createCell(0);
	    	cell.setCellValue(p.getTitle());
	    	cell = row.createCell(1);
	    	cell.setCellValue("커버핏");
	    	cell = row.createCell(2);
	    	cell.setCellValue(p.getPrice());
	    	cell = row.createCell(3);
	    	cell.setCellValue(p.getRealPrice());
	    	cell = row.createCell(4);
	    	cell.setCellValue(p.getOptionEnabled());
	    	cell = row.createCell(5);
	    	cell.setCellValue(p.getOptionNo());
	    	cell = row.createCell(6);
	    	cell.setCellValue(p.getOption());
	    	cell = row.createCell(7);
	    	cell.setCellValue(p.getSelectBoxEnabled());
	    	cell = row.createCell(8);
	    	cell.setCellValue(p.getDetailImg());
	    	cell = row.createCell(9);
	    	cell.setCellValue("/thmb25/"+p.getThmb());
	    	
	    	i++;
	    }
	   
		File file = new File("C:\\Users\\15kso\\OneDrive\\바탕 화면\\새 폴더\\옵션.xls");
        FileOutputStream fos = null;
        fos = new FileOutputStream(file);
        workbook.write(fos);
	}
	
	public static void saveDetailImage(String imageUrl, String savePath, File afterFile) throws MalformedURLException {
		URL url;
		//jpeg,png,bmp,wbmp,gif 만 지원을함. webp 지원안함 ㅡㅡ 다른 라이브러리 찾아라  개같음
		BufferedImage bi = null;

		try {
			url = new URL(imageUrl); // 다운로드 할 이미지 URL
			bi = ImageIO.read(url);
			
			Image resizeImage = bi.getScaledInstance(bi.getWidth(), bi.getHeight(), Image.SCALE_SMOOTH);
			BufferedImage newImage = new BufferedImage(bi.getWidth(), bi.getHeight(), BufferedImage.TYPE_INT_RGB);
            Graphics g = newImage.getGraphics();
        	g.drawImage(resizeImage, 0, 0, null);
            g.dispose();
			ImageIO.write(newImage, "jpeg", afterFile);
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}

	public static void saveThumbImage(String imageUrl, String savePath, File afterFile) throws MalformedURLException {
		URL url;
		//jpeg,png,bmp,wbmp,gif 만 지원을함. webp 지원안함 ㅡㅡ 다른 라이브러리 찾아라  개같음
		BufferedImage bi = null;
		try {
			url = new URL(imageUrl); // 다운로드 할 이미지 URL
			bi = ImageIO.read(url);
			ImageIO.write(bi, "png", afterFile);
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
	}
	
//	private void saveWebpThumbImage(String imageUrl, String savePath, File afterFile) throws IOException {
////		URL url;
////		BufferedImage bi = null;
//		try {
//			URL url = new URL(imageUrl); // 다운로드 할 이미지 URL
//			System.out.println("URL:::::::::::::::::::"+url);
//			System.out.println("AFTERFILE::::::::::::"+afterFile);
//			BufferedImage image = ImageIO.read(url);
//			ImageIO.write(image, "png", afterFile);
//	
////			bi = ImageIO.read(url);
////			ImageIO.write(bi, "png", afterFile);
//			
//		} catch (MalformedURLException e) {
//			e.printStackTrace();
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
//		
//		
//	}
}
